@page "/detalle-post/{id:int}"
@using ClienteBlogWASM.Modelos
@using ClienteBlogWASM.Modelos.ViewModels
@using ClienteBlogWASM.Servicios.IServicio
@inject IPostsServicio postsServicio
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using ClienteBlogWASM.Helpers


@if (PostModel == null)
{
    <p><em>Cargando post...</em></p>
}
else
{
    <h3>Detalles del post</h3>

    <div class="container mt-4 mb-5">
        <EditForm Model="PostModel" OnValidSubmit="HandleUpdate">
            <DataAnnotationsValidator />
            <div class="card shadow border-0">
                <div class="card-header bg-light p-3 d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">@PostModel.Titulo</h4>

                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" role="switch" id="modoEdicionCheck" @bind="modoEdicion">
                        <label class="form-check-label" for="modoEdicionCheck">Modificar</label>
                    </div>
                </div>
                <div class="card-body p-4">
                    <div class="row">
                        <div class="col-md-7">
                            <div class="mb-3">
                                <label for="titulo" class="form-label">Título</label>
                                <InputText id="titulo" class="form-control" @bind-Value="PostModel.Titulo" disabled="@(!modoEdicion)" />
                                <ValidationMessage For="@(() => PostModel.Titulo)" />
                            </div>

                            <div class="mb-3">
                                <label for="descripcion" class="form-label">Descripción</label>
                                <InputTextArea id="descripcion" class="form-control" @bind-Value="PostModel.Descripcion" disabled="@(!modoEdicion)" rows="5" />
                                <ValidationMessage For="@(() => PostModel.Descripcion)" />
                            </div>

                            <div class="mb-3">
                                <label for="etiquetas" class="form-label">Etiquetas</label>
                                <InputText id="etiquetas" class="form-control" @bind-Value="PostModel.Etiquetas" disabled="@(!modoEdicion)" />
                                <div class="form-text">Separa las etiquetas con comas (ej: Blazor, .NET, Desarrollo Web).</div>
                                <ValidationMessage For="@(() => PostModel.Etiquetas)" />
                            </div>
                        </div>
                        <div class="col-md-5">
                            <label class="form-label">Imagen del Post</label>
                            <div class="image-upload-container text-center p-3 border rounded">
                                @if (PostModel != null && !string.IsNullOrEmpty(PostModel.RutaImagen))
                                {
                                    <img src="@($"http://localhost:5269{PostModel.RutaImagen}")" class="img-fluid rounded shadow-sm" alt="@PostModel.Titulo" />
                                }
                                else
                                {
                                    <p class="text-muted">Este post no tiene imagen.</p>
                                }
                            </div>
                            @if (modoEdicion)
                            {
                                <div class="mt-3">
                                    <label class="form-label">Cambiar Imagen (Opcional)</label>
                                    <InputFile OnChange="HandleFileSelection" class="form-control" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer bg-light text-end p-3">
                    <div class="d-flex justify-content-end gap-2">
                        <NavLink href="/" class="btn btn-secondary">
                            <i class="bi bi-arrow-left-circle"></i>&nbsp; Regresar
                        </NavLink>

                        @* Solo muestra el botón de Actualizar si estamos en modo edición *@
                        @if (modoEdicion)
                        {
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-1">Guardando...</span>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle-fill"></i>
                                    <span>&nbsp; Actualizar Post</span>
                                }
                            </button>
                        }
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; } 

    private bool modoEdicion = false;
    private bool isSubmitting = false;
    private string? imagenPreviewUrl;
    private IBrowserFile? imagenSeleccionada;
    private PostActualizarVM? PostModel { get; set; } 

    protected override async Task OnParametersSetAsync()
    {
        var postExistente = await postsServicio.GetPost(Id);
        if (postExistente != null)
        {
            // Mapeamos el Post a un PostVM para el formulario
            PostModel = new PostActualizarVM
                {
                    Id = postExistente.Id,
                    Titulo = postExistente.Titulo,
                    Descripcion = postExistente.Descripcion,
                    Etiquetas = postExistente.Etiquetas,
                    RutaImagen = postExistente.RutaImagen
                    // No asignamos la imagen aquí, solo la URL de vista previa
                };

            if (!string.IsNullOrEmpty(postExistente.RutaImagen))
            {
                imagenPreviewUrl = postExistente.RutaImagen;
            }
        }
    }

    private async Task HandleUpdate()
    {
        isSubmitting = true;

        // Aquí necesitas un ViewModel para la actualización que acepte IBrowserFile
        // Asumiré que tienes un PostActualizarVM o similar
        var postParaActualizar = new PostActualizarVM
            {
                Titulo = PostModel.Titulo,
                Descripcion = PostModel.Descripcion,
                Etiquetas = PostModel.Etiquetas,
                RutaImagen = PostModel.RutaImagen // Puede ser null si no se cambió
            };
            await postsServicio.UpdatePost(Id, postParaActualizar);
            await JsRuntime.ToastrSuccess("¡Post actualizado con éxito!");

        // Llama al servicio para ejecutar el PATCH o PUT
        var resultado = await postsServicio.UpdatePost(Id, postParaActualizar);

        if (resultado != null)
        {
            // Redirige a la página principal si la actualización fue exitosa
            NavigationManager.NavigateTo("/");
        }

        isSubmitting = false;
    }

    // Este método es para la vista previa de la imagen al seleccionarla
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        imagenSeleccionada = e.File;
        if (imagenSeleccionada != null)
        {
            var buffer = new byte[imagenSeleccionada.Size];
            await imagenSeleccionada.OpenReadStream().ReadAsync(buffer);
            var format = "image/png"; // O detecta el formato real
            imagenPreviewUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        }
    }

}