@page "/crear-post"
@page "/editar-post/{id:int}"
@using ClienteBlogWASM.Modelos
@using ClienteBlogWASM.Modelos.ViewModels
@using ClienteBlogWASM.Servicios.IServicio
@using System.ComponentModel.DataAnnotations
@inject IPostsServicio postsServicio
@inject IJSRuntime JsRuntime
@using ClienteBlogWASM.Helpers
@inject NavigationManager Navigation

<PageTitle>@(esModoCreacion ? "Crear Nuevo Post" : $"Editar Post")</PageTitle>

<div class="container mt-4 mb-5">
    <EditForm Model="PostModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <div class="card shadow border-0">
            <div class="card-header bg-light p-3">
                <h3 class="mb-0">@(esModoCreacion ? "Detalles del Nuevo Post" : "Editando Post")</h3>
            </div>
            <div class="card-body p-4">
                <div class="row">
                    <div class="col-md-7">
                        <div class="mb-3">
                            <label for="titulo" class="form-label">Título</label>
                            <InputText id="titulo" class="form-control" @bind-Value="PostModel.Titulo" placeholder="Un título atractivo..." />
                            <ValidationMessage For="@(() => PostModel.Titulo)" />
                        </div>

                        <div class="mb-3">
                            <label for="descripcion" class="form-label">Descripción</label>
                            <InputTextArea id="descripcion" class="form-control" @bind-Value="PostModel.Descripcion" rows="5" placeholder="Escribe aquí el contenido principal de tu post..." />
                            <ValidationMessage For="@(() => PostModel.Descripcion)" />
                        </div>

                        <div class="mb-3">
                            <label for="etiquetas" class="form-label">Etiquetas</label>
                            <InputText id="etiquetas" class="form-control" @bind-Value="PostModel.Etiquetas" />
                            <div class="form-text">Separa las etiquetas con comas (ej: Blazor, .NET, Desarrollo Web).</div>
                            <ValidationMessage For="@(() => PostModel.Etiquetas)" />
                        </div>
                    </div>
                    <div class="col-md-5">
                        <label class="form-label">Imagen del Post</label>
                        <div class="image-upload-container text-center p-3 border rounded">
                            <InputFile OnChange="OnImageSelected" accept=".jpg, .jpeg, .png" class="form-control" />
                            @if (!string.IsNullOrEmpty(imagenPreviewUrl))
                            {
                                <div class="mt-3">
                                    <p class="text-muted small">Vista Previa:</p>
                                    <img src="@imagenPreviewUrl" class="img-fluid rounded shadow-sm" style="max-height: 200px;" alt="Vista previa de la imagen" />
                                </div>
                            }
                        </div>
                        <ValidationMessage For="@(() => PostModel.RutaImagen)" />
                    </div>
                </div>
            </div>
            <div class="card-footer bg-light text-end p-3">
                <div class="d-flex justify-content-end gap-2">
                    <NavLink href="posts" class="btn btn-secondary">
                        <i class="bi bi-x-circle"></i>&nbsp; Cancelar
                    </NavLink>
                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-1">Guardando...</span>
                        }
                        else
                        {
                            <i class="bi bi-check-circle-fill"></i>
                            <span>&nbsp; @(esModoCreacion ? "Guardar Post" : "Actualizar Post")</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private PostCrearVM PostModel { get; set; } = new();
    private bool isSubmitting = false;
    private string? imagenPreviewUrl;
    private IBrowserFile? imagenSeleccionada;
    private bool esModoCreacion => Id == null;

    protected override async Task OnParametersSetAsync()
    {
        if (!esModoCreacion)
        {
            var postExistente = await postsServicio.GetPost(Id.Value);
            if (postExistente != null)
            {
                PostModel = new PostCrearVM
                    {
                        Titulo = postExistente.Titulo,
                        Descripcion = postExistente.Descripcion,
                        Etiquetas = postExistente.Etiquetas,
                        RutaImagen = postExistente.RutaImagen
                    };
                if (!string.IsNullOrEmpty(postExistente.RutaImagen))
                {
                    imagenPreviewUrl = postExistente.RutaImagen;
                }
            }
        }
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        try
        {
            if (imagenSeleccionada != null)
            {
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(imagenSeleccionada.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(imagenSeleccionada.ContentType);
                content.Add(fileContent, "imagen", imagenSeleccionada.Name);
                PostModel.RutaImagen = await postsServicio.UploadImagen(content);
            }

            if (esModoCreacion)
            {
                var postCreado = await postsServicio.CreatePost(PostModel);
                await JsRuntime.ToastrSuccess("¡Post creado con éxito!");
            }
            else
            {
                // --- ¡AQUÍ ESTÁ LA MAGIA! ---
                // Se añade la llamada al servicio de actualización
                var postParaActualizar = new PostActualizarVM
                    {
                        Id = Id.Value,
                        Titulo = PostModel.Titulo,
                        Descripcion = PostModel.Descripcion,
                        Etiquetas = PostModel.Etiquetas,
                        RutaImagen = PostModel.RutaImagen
                    };

                // 2. Enviamos el "pasaporte" a la API
                await postsServicio.UpdatePost(Id.Value, postParaActualizar);
                await JsRuntime.ToastrSuccess("¡Post actualizado con éxito!");
            }
            Navigation.NavigateTo("/posts");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar el post: {ex.Message}");
            await JsRuntime.ToastrError(esModoCreacion ? "Error en la creación del post" : "Error en la actualización del post");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        imagenSeleccionada = e.File;
        if (imagenSeleccionada != null)
        {
            try
            {
                var format = imagenSeleccionada.ContentType;
                var resizedImageFile = await imagenSeleccionada.RequestImageFileAsync(format, 400, 400);
                using var memoryStream = new MemoryStream();
                using var stream = resizedImageFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();
                imagenPreviewUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al procesar la imagen: {ex.Message}");
                await JsRuntime.ToastrError("Error al cargar la imagen. Verifica que sea menor a 5MB.");
            }
        }
    }
}